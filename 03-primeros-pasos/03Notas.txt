COMPONENTE

Es como dividimos una aplicación, por partes reutilizables

Por ejemplo un navbar es un componente

Estos tienen estado, esto quiere decir, cuando cargams la pagina la navbar tiene un estado inicial, pero a medida que interactuamos con esta este estado puede ir cambiando


---------------------------------------------------------------------------
Crear un nuevo proyecto con vite:

yarn create vite

seleccionamos react

Seleccionamos js como lenguaje

escribimos yarn para que se ejecuten las dependencias

yarn dev lo ejecuta en el localhost

Yarn es un simil de npm

------------------------------------------------------------

JSX, se usa similar que en astro, solo que no debemos usar llaves para crear elementos html


Inicialmente importamos las cosas necesarias para renderizar la app

Si deseamos usar npm en vez de yarn, debemos borrar yarn y hacer el npm intstall


----------------------------------------------------------------------

Primer componente: MAS CONOCIDO COMO FUNCTIONAL COMPONENT

1. Creamos un archivo jsx, este va a ser el archivo de entrada, le ponemos el nombre que asigne que será el principal componente

3. importamos la función creada en este archivo a el archivo main que se encargara de renderizar


-----------------------------------------------------------------------
NODOS:

Si deseamos retornar varios elementos HTML, como un h1 y un p, debemos envolverlos en un nodo, para poder devolverlos, por ejemplo un div

Para evitar tener que crear más elementos HTML, existe el fragment, el cual se debe importar de react

TAMBIEN LA FORMA OPTIMA PARA REALIZAR ESTO ES, ENVOLVIENDO LOS ELEMENTOS HTML EN TAGS VACIOS, YA QUE REACT INFERIRA QUE ES UN FRAGMENT


-------------------------------------------------------------------------
IMPRESION DE VARIABLES JS EN EL HTML

Para esto debemos meter dentro de la etiqueta HTML unas llaves {}, debemos tener en cuenta que no podemos imprmir OBJETOS NI BOOLEANS. Para poder imprimir un objeto debemos acceder al nombre de cada propiedad con el .

Por el contrario si podemos imprimir arrays, y lo que va a hacer react es imprmiri ELEMENTO POR ELEMENTO COMO SI ESTUVIERA ITERANDOLO

---------------------------------------------------------------------

CREAR VARIABLES DENTRO DEL FUNCTIONAL COMPONENT:

Esto no esta bien ya que cada que el componente se renderice, se cargaran nuevamente estas variables, por ende es mejor dejarlas por fuera



----------------------------------------------------------------------

USAR ESTILOS GLOBALES CSS:

Debemos crear un archivo con todos los estilos, después lo que haremos será llamarlo en el main.jsx que es donde todo se está renderzando, para que a todo lo que se renderice se aploque



-----------------------------------------------------------------------

COMUNICACION ENTRE COMPONENTES (PROPS)

Esto es el mismo concepto de pasarle atributos  una función, se le pasan desde el padre, se recibe y se muestra dentro de una etiqueta HTML usando llaves, tener en cuenta que los atributos del functional component se declaran dentro de unas llaves

El elemento padre seria el main.jsx, más específicamente y se envían dentro de la etiqueta HTML donde se llama al functional component, se envían poniendo el nombre del atributo declarado e igualándolo a su valor


--------------------------------------------------------------------

PROPTYPES

1. Desacrgamos: yarn add prop-types

2. Importamos PropTypes from "prop-types"


Esto se usa con el fin de añadirle a cada componente, Lo que debe recibir como props, el tipo y si puede ser o no nulo.

Para poder hacer esto creamos como una especia de objeto, el cual se nombre com NombeFunctionComponent.PropTypes{}


Dentro de las llaves ponemos el nombre del prop:PropTypes.tipoVar

Esto indica el tipo de dato que debe ser, si deseamos que sea obligatorio, aimplemente ponemos después del tipoDeVariable .isRequired

Cada cosita va separada por, igual que un objeto js


----------------------------------------------------------------------

DEFAULTPROPS 

Esto nos permite dar valores predeterminados a los props en caso de que no se envíen por parte del padre, evitando así tener que darle el valor en los paréntesis del functional component con el =,   se hace igual que el proptypes, pero se pone es .defaultProps




-----------------------------------------------------------------------

EVENTOS


CLICK
Los eventos se asignan en el functional component, en la etiqueta del elemento que queremos que se aplique un evento, por ejemplo el evento de click, se llama onClick = {codigoJS}  Y ya llamamos dentro de las llaves todo el js que queramos


---------------------------------------------------------------------

USESTATE

Esto funciona de la siguiente manera, si react mostro algo en pantalla, y por ejemplo tenemos un botón, que lo que va a hacer es modificar eso que se mostro inicialmente, cuando presionamos el botón no se cambiara lo que está impreso inicialmente en pantalla, ya que fue algo que ya se imprimio y solo se está modificando la variable, por ende debemos usar el UseState

Este es un hook, por lo que debemos Importarlo como se importan todos los hooks, desde react
